{"version":3,"file":"static/js/835.f9b14c07.chunk.js","mappings":"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","sources":["components/Contact/Contact.js","redux/contacts/selectors.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","pages/Contacts.js"],"sourcesContent":["import { useDispatch } from \"react-redux\";\nimport { MdCheckCircle } from 'react-icons/md'\nimport { Box, Button, Flex, Icon, Text } from '@chakra-ui/react'\nimport { deleteContact } from \"../../redux/contacts/operations\";\n\nexport const Contact = ({ contact }) => {\n  const dispatch = useDispatch();\n\n  const onDeleteContact = () => {\n    dispatch(deleteContact(contact.id));\n  };\n\n  return (\n    <Box maxW=\"1200px\" bg=\"#f0eafb\" borderRadius='6px' boxShadow='dark-lg'>\n      <Flex justifyContent='space-between' alignItems=\"center\" gap=\"12px\" ml='6px'>\n        <Icon as={MdCheckCircle} color=\"purple.500\" w=\"22px\" h=\"22px\" />\n        <Text fontSize=\"16px\">\n          {contact.name}: {contact.number}\n        </Text>\n        <Button\n          colorScheme=\"purple\"\n          variant=\"solid\"\n          size=\"sm\"\n          _hover={{ bg: '#808000', }}\n          _active={{\n            bg: '#dddfe2',\n            transform: 'scale(0.98)',\n            borderColor: '#bec3c9',\n          }}\n          _focus={{\n            boxShadow:\n              '0 0 1px 2px rgba(88, 144, 255, .75), 0 1px 1px rgba(0, 0, 0, .15)',\n          }}\n          onClick={onDeleteContact}\n        >\n          Delete\n        </Button>\n      </Flex>\n    </Box>\n  );\n};","import { createSelector } from \"@reduxjs/toolkit\";\n\nexport const selectAllContacts = state => state.contacts.items;\n\nexport const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.filters;\n\nexport const selectVisibleContacts = createSelector(\n  [selectAllContacts, selectFilter],\n  (contacts, filter) => {\n    return (contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter)\n    ));\n  }\n);\n","import { useSelector } from 'react-redux';\nimport { Contact } from 'components/Contact/Contact';\nimport {  selectVisibleContacts } from '../../redux/contacts/selectors';\nimport {\n  List,\n  ListItem,\n  Box,\n  Text,\n} from '@chakra-ui/react';\n// import { CheckCircleIcon } from '@chakra-ui/icons';\n\nexport const ContactList = () => {\n  const contacts = useSelector(selectVisibleContacts);\n\n  return (\n    <Box>\n      <Text fontSize='22px'>\n        List of contacts\n      </Text>\n      <List spacing=\"20px\" pt=\"24px\">\n        {contacts.map(contact => (\n          <ListItem key={contact.id} spacing=\"20px\">\n            <Contact contact={contact} />\n          </ListItem>\n        ))}\n      </List>\n    </Box>\n  );\n};\n","import {  useDispatch, useSelector } from \"react-redux\"\nimport { addContact } from \"../../redux/contacts/operations\";\nimport { selectAllContacts } from \"../../redux/contacts/selectors\";\nimport { Button, FormLabel, Input, Text,} from \"@chakra-ui/react\";\n// import { CheckIcon, PhoneIcon } from \"@chakra-ui/icons\";\n// import { Form } from \"react-router-dom\";\n// import { PiBookOpenTextFill } from 'react-icons/pi';\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectAllContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const form = event.target;\n    const formName = event.target[0].value;\n    const formPhone = event.target[1].value;\n\n    if (contacts.some(({ name }) => name === formName)) {\n      console.log('not name');\n      return form.reset();\n    }\n\n    if (contacts.some(({ number }) => number === formPhone)) {\n      console.log('not phone');\n      return form.reset();\n    }\n    dispatch(addContact({ name: formName, number: formPhone }));\n    form.reset();\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Text fontSize='22px'>\n        Add a contact\n      </Text>\n      <FormLabel mb=\"12px\">\n        Name\n        <Input\n          type=\"text\"\n          value={contacts.name}\n          placeholder=\"name\"\n          variant=\"filled\"\n          bg=\"#f0eafb\"\n          boxShadow='dark-lg'\n        />\n      </FormLabel>\n      <FormLabel mb=\"12px\">\n        Number\n        <Input\n          type=\"tel\"\n          value={contacts.number}\n          placeholder=\"phone number\"\n          variant=\"filled\"\n          bg=\"#f0eafb\"\n          boxShadow='dark-lg'\n        />\n      </FormLabel>\n      <Button\n        type=\"submit\"\n        colorScheme=\"purple\"\n        variant=\"solid\"\n        size=\"sm\"\n        _hover={{ bg: '#808000' }}\n        _active={{\n          bg: '#dddfe2',\n          transform: 'scale(0.98)',\n          borderColor: '#bec3c9',\n        }}\n        _focus={{\n          boxShadow:\n            '0 0 1px 2px rgba(88, 144, 255, .75), 0 1px 1px rgba(0, 0, 0, .15)',\n        }}\n      >\n        ADD\n      </Button>\n    </form>\n  );\n};\n\n\n","import { useDispatch, useSelector} from \"react-redux\";\nimport { selectFilter } from \"../../redux/contacts/selectors\";\nimport { setFilter } from \"../../redux/contacts/filtersSlice\";\nimport { FormLabel, Input } from \"@chakra-ui/react\";\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleFilter = event => {\n    const normalizedFilter = event.target.value.toLowerCase().trim();\n    dispatch(setFilter(normalizedFilter));\n  };\n  return (\n    <FormLabel mb='12px'>Find contacts by name\n    <Input\n      type=\"text\"\n      value={filter}\n      placeholder=\"Enter contact name\"\n      variant=\"filled\"\n      bg=\"#f0eafb\"\n      boxShadow='dark-lg'\n      onChange={handleFilter}\n    />\n    </FormLabel>\n  );\n};","import { ContactList } from \"components/ContactList/ContactList\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectLoading } from \"../redux/contacts/selectors\";\nimport { useEffect } from \"react\";\nimport { fetchContacts } from \"../redux/contacts/operations\";\nimport { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { Flex } from '@chakra-ui/react'\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Flex flexDirection=\"column\" p=\"30px\" m='20px' gap=\"20px\">\n      <div>{ isLoading && 'Request in progress...'}</div>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </Flex>\n  );\n}"],"names":["Contact","_ref","contact","dispatch","useDispatch","_jsx","Box","maxW","bg","borderRadius","boxShadow","children","_jsxs","Flex","justifyContent","alignItems","gap","ml","Icon","as","MdCheckCircle","color","w","h","Text","fontSize","name","number","Button","colorScheme","variant","size","_hover","_active","transform","borderColor","_focus","onClick","deleteContact","id","selectAllContacts","state","contacts","items","selectLoading","loading","selectFilter","filters","selectVisibleContacts","createSelector","filter","toLowerCase","includes","ContactList","useSelector","List","spacing","pt","map","ListItem","ContactForm","onSubmit","event","preventDefault","form","target","formName","value","formPhone","some","console","log","reset","_ref2","addContact","FormLabel","mb","Input","type","placeholder","Filter","onChange","normalizedFilter","trim","setFilter","Contacts","isLoading","useEffect","fetchContacts","flexDirection","p","m"],"sourceRoot":""}